README 1

Ανάπτυξη Λογισμικού για Δίκτυα και Τηλεπικοινωνίες
Στο πρώτο παραδοτέο αυτής της εργασίας για το έτος 2018 – 2019 υλοποιήσαμε μια εφαρμογή σε android studio.
Υπάρχουν δύο packages. Στο package WebSocketsServers βρίσκεται ο κώδικας των WebSockets για την επικοινωνία μεταξύ του 
Edge Server και του Backhaul Server. Στο δεύτερο package βρίσκεται ο κώδικας της εφαρμογής που υλοποιείται στα android τερματικά.
Το interface μεταξύ της εφαρμογής και του χρήστη περιλαμβάνει έξι κουμπιά, τρία TextView και ένα Menu ρυθμίσεων.
  Στο Menu υπάρχει ένα κουμπί για την έξοδο του χρήστη από την εφαρμογή, το
οποίο όταν πατηθεί εμφανίζει αναδυόμενο παράθυρο, καθώς και ένα κουμπί μέσω του
οποίου ρυθμίζεται η συχνότητα με την οποία το android τερματικό κάνει publish τις
μετρήσεις που απαιτούνται στην εκφώνηση της εργασίας. Ο χρήστης έχει τρεις επιλογές
(διαλέγει μία απο τις τρεις) για τη συχνότητα αποστολής, οι οποίες ειναι 5sec,
10sec, 20sec.
a.      Υπάρχει ένα κουμπι FLASHLIGHT ON/OFF, το οποίο ενεργοποιεί και απενεργοποιεί
το φλας του κινητού. Η υλοποίηση της λειτουργίας αυτης γίνεται στην κλάση
MainActivity μέσω των συναρτήσεων flashLightOn, flashLightOn και της
onRequestPermissionsResult.
b.      Το κουμπί SOUND όταν πατηθεί παράγει μια ηχητική ειδοποίηση για 10sec.
c.      Το κουμπί CONNECT υλοποιεί τη σύνδεση του android τερματικού με τον MQTT
Broker, ο οποίος ειναι εγκατεστημένος στο laptop που χρησιμοποιείται ως Edge Server.
d.      Το κουμπί DISCONNECT κάνει την αποσύνδεση από τον MQTT Broker.
e. Το κουμπί SUBSCRIBE κάνει subscribe στο κατάλληλο topic.
f.      Αντίστοιχα και το UNSUBSCRIBE.
Επιπρόσθετα, στην οθόνη του χρήστη εμφανίζονται οι μετρήσεις του accelerometer,
καθώς και οι συντεταγμένες του κινητού.
-       Για το GPS stigma γίνεται ο υπολογισμός με τις κατάλληλες συναρτήσεις στη
MainActivity.
-       Για το accelerometer υπάρχει μια κλάση, η AccelerometerManager και ένα
interface, το AccelerometerListener.

Υπάρχει μία κλάση InternetConnection μέσα στην οποία γίνεται ο έλεγχος για το αν υπάρχει σύνδεση στο internet και άλλη μία κλάση,
η InternetConnectionCheck, η οποία καλείται κατά την έναρξη της εφαρμογής, μέσα στην οποία δημιουργείται ένα καινουριο thread
που ελέγχει ανά 5sec αν υπάρχει σύνδεση στο internet. Στην περίπτωση που δεν υπάρχει, εμφανίζει σχετικό μήνυμα.
Επίσης, υπάρχει η MACaddress η οποία βρίσκει τη MAC διεύθυνση του τερματικού. Η MACaddress χρησιμοποιείται ως topic για τη 
σύνδεση του κάθε τερματικού στον MQTT Broker.
        Στην κλάση CSV υπάρχει ο κώδικας που δημιουργεί το TrainingSet.
Το κάθε κινητό κάνει publish στο δικό του topic που έχει ως τίτλο την mac διεύθυνσή του και στέλνει μέσα σε ένα string τις 
μετρήσεις από το GPS, το accelerometer και το csv αρχείο, με συχνότητα αποστολής αυτή που έχει επιλέξει ο χρήστης. 
Ο συγχρονισμός γίνεται χρησιμοποιώντας το SystemClock του κινητού.

Στην υλοποίηση της εργασίας μας, ο Edge Server επικοινωνεί με τον Backhaul Server καθώς και με τα δύο android κινητά. 
Εξάγει το feauture vector για κάθε ένα απο τα CSV αρχεία που λαμβάνει από τα δύο κινητά android, με τυχαίο τρόπο, με τη μορφή 
διανύσματος. Όποτε υπολογίζεται ένα καινούριο feature vector, αυτό κατηγοριοποιείται μέσω της παραλλαγής του αλγορίθμου kNN 
που υλοποιήσαμε. Ο κώδικάς μας υπολογίζει την ευκλείδεια απόσταση μεταξύ των διανυσμάτων που παίρνει ως ορίσματα από το training
set και το κάθε feature vector που λαμβάνει. Στη συνέχεια υπολογίζει ποιοι είναι οι k κοντινότεροι γείτονες και αποθηκεύει τις 
αποστάσεις τους, καθώς και τα labels τους. Έπειτα, για να ειναι πιο αποτελεσματικό το classification μας, υπολογίζουμε τα βάρυ 
των k κοντινότερων γειτόνων και ορίζουμε το label του CSV το label του γείτονα με τη μεγαλύτερη τιμή του αποτελέσματος του 
πολλαπλασιασμού της μετρικής βάρους και του συνόλου των γειτόνων που έχουν ίδιο label (EyesClosed ή EyesOpened). Κάθε φορά που 
το κινητό λαμβάνει ενα feature vector απο το android κινητό, στην κονσόλα εμφανίζεται σε ποια κλάση το κατηγοριοποίησε ο 
αλγόριθμος kNN, η πραγματική κλάση του CSV αρχείου (μαζι με το μήνυμα επιτυχίας ή αποτυχίας), καθώς και μετά το πέρας του 
προγράμματος να εμφανίζει το ποσοστό επιτυχίας του.
Στη συνέχεια, ο Edge Server στέλνει τις εντολές στα δύο android κινητά, ανάλογα με την κατηγοριοποίηση των CSV από τον kNN. 
Αν τα λαμβανόμενα CSV με κατηγοριοποίηση EyesClosed ειναι ίσα ή περισσότερα από 3, τότε είμαστε στο danger level 1, όπου το 
android τερματικό ειδοποιείται μέσω μηνύματος και ηχητικής ειδοποίησης. Όταν έρθει EyesOpen, τότε ισχύει το danger level 0 και 
σταματάει η ηχητική ειδοποίηση. Στην περίπτωση που τα CSV EyesClosed είναι 3 ή και περισσότερα και υπάρχει κάποιος σε ίση ή 
μικρότερη απόσταση από αυτήν που έχει οριστεί, τότε είμαστε στο danger level 2, όπου και ειδοποιεί και το 2ο android κινητό μέσω 
συγκεκριμένου μηνύματος και flash. Το danger level 3 είναι η περίπτωση που τα δύο τερματικά android είναι κοντά (ισχύει η 
προηγούμενη συνθήκη) και ισχύει και για τα δύο η συνθήκη των συνεχόμενων κατηγοριοποιημένων CSV >= 3, τότε ειδοποιεί και τα δύο 
κινητά μέχρι να να υφίσταται ο κίνδυνος 3 (λαμβάνουμε EyesOpen). Όταν συμβαίνει αυτό είμαστε στο danger level 4, όπου και 
σταματάνε οι ειδοποιήσεις. Κάθε ένα απο τα σενάρια αποστέλλονται και εισάγονται στον Backhaul Server μέσω jdbc σε μια βάση 
δεδομένων, ως log αρχεια με τη μορφή που δείχνει η εκφώνηση, δημιουργώντας έτσι ένα ιστορικό.
